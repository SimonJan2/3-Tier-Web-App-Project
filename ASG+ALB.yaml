AWSTemplateFormatVersion: '2010-09-09'
Description: Highly available 3 Tier architecture for web application
#← ←←←←←←←←←←←←← Parameters →→→→→→→→→→→→→→#
Parameters:  

  KeyName:
    Type: AWS::EC2::KeyPair::KeyName
    Description: Name of an existing EC2 KeyPair to enable SSH access to the instances
    Default: MyKeyPair
    

#←←←←←←←←←←←←←← Resources →→→→→→→→→→→→→→#
Resources:
#------------------------- Web Tier Load Balancer -------------------------#
  WebTierSecurityGroupLoadBalancer:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Security group for the web tier load balancer
      VpcId: !ImportValue MyVPC
      GroupName: WebTierSecurityGroupLoadBalancer
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 22
          ToPort: 22
          CidrIp: 0.0.0.0/0
        - IpProtocol: icmp
          FromPort: -1
          ToPort: -1
          CidrIp: 0.0.0.0/0
      Tags:
        - Key: Name
          Value: WebTierSecurityGroupLoadBalancer
  
  WebTierLoadBalancer:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      Name: WebTierLoadBalancer
      Scheme: internet-facing
      Subnets:
        - !ImportValue WebTierPublicSubnet1
        - !ImportValue WebTierPublicSubnet2
      SecurityGroups:
        - !GetAtt WebTierSecurityGroupLoadBalancer.GroupId
      LoadBalancerAttributes:
        - Key: idle_timeout.timeout_seconds
          Value: '60'
    DependsOn: WebTierSecurityGroupLoadBalancer

  WebTierLoadBalancerListener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      DefaultActions:
        - Type: forward
          TargetGroupArn: !Ref WebTierTargetGroup
      LoadBalancerArn: !Ref WebTierLoadBalancer
      Port: 80
      Protocol: HTTP
    
  WebTierTargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      Name: WebTierTargetGroup
      Protocol: HTTP
      TargetType: instance  # Targets are EC2 instances
      VpcId: !ImportValue MyVPC # Target Group is in the same VPC as the load balancer
      HealthCheckPath: /  # Use the root URL for health checks      
      Port: 80  # Target Group will forward traffic to port 80 of its targets
      HealthCheckProtocol: HTTP 
      HealthCheckIntervalSeconds: 30 
      HealthCheckTimeoutSeconds: 5  
      HealthyThresholdCount: 2  
      UnhealthyThresholdCount: 2  

#------------------------- Application Tier Load Balancer -------------------------#
  ApplicationTierSecurityGroupLoadBalancer:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Security group for the application tier load balancer
      VpcId: !ImportValue MyVPC
      GroupName: ApplicationTierSecurityGroupLoadBalancer
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0
      Tags:
        - Key: Name
          Value: ApplicationTierSecurityGroupLoadBalancer
  
  ApplicationTierLoadBalancer:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      Name: ApplicationTierLoadBalancer
      Scheme: internal
      Subnets: 
        - !ImportValue ApplicationTierPrivateSubnet1
        - !ImportValue ApplicationTierPrivateSubnet2
      SecurityGroups:
        - !GetAtt ApplicationTierSecurityGroupLoadBalancer.GroupId
      LoadBalancerAttributes:
        - Key: idle_timeout.timeout_seconds
          Value: '60'
    DependsOn: ApplicationTierSecurityGroupLoadBalancer

  ApplicationTierLoadBalancerListener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      DefaultActions:
        - Type: forward
          TargetGroupArn: !Ref ApplicationTierTargetGroup
      LoadBalancerArn: !Ref ApplicationTierLoadBalancer
      Port: 80
      Protocol: HTTP
    
  ApplicationTierTargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      Name: ApplicationTierTargetGroup
      Protocol: HTTP
      TargetType: instance  # Targets are EC2 instances
      VpcId: !ImportValue MyVPC # Target Group is in the same VPC as the load balancer
      HealthCheckPath: /  # Use the root URL for health checks
      Port: 80  # Target Group will forward traffic to port 80 of its targets
      HealthCheckProtocol: HTTP 
      HealthCheckIntervalSeconds: 30 
      HealthCheckTimeoutSeconds: 5  
      HealthyThresholdCount: 2  
      UnhealthyThresholdCount: 2

#----------------------------- Web Tier Auto Scaling Group -----------------------------#
  WebTierAutoScalingGroup:
    Type: AWS::AutoScaling::AutoScalingGroup
    Properties:
      AutoScalingGroupName: WebTierAutoScalingGroup # Name of the ASG
      LaunchConfigurationName: !Ref WebTierLaunchConfiguration # Use the launch configuration created above
      MaxSize: 4 # Max number of instances in the ASG
      DesiredCapacity: 2 # Desired number of instances
      MinSize: 2 # Min number of instances in the ASG
      TargetGroupARNs:
        - !Ref WebTierTargetGroup # Associate the target group with the ASG
      VPCZoneIdentifier:
        - !ImportValue WebTierPublicSubnet1 # Launch instances in these subnets
        - !ImportValue WebTierPublicSubnet2 # Launch instances in these subnets
      HealthCheckType: EC2 # Use EC2 health checks
      HealthCheckGracePeriod: 300 # Wait 300 seconds before checking health
      MetricsCollection:
        - Granularity: "1Minute"  # Metrics granularity: 1 minute
          Metrics:
            - "GroupMinSize"  # Minimum size of the Auto Scaling Group
            - "GroupMaxSize"  # Maximum size of the Auto Scaling Group
            - "GroupDesiredCapacity"  # Desired capacity of the Auto Scaling Group
            - "GroupInServiceInstances"  # Number of instances in service
            - "GroupPendingInstances"  # Number of instances pending
            - "GroupStandbyInstances"  # Number of instances in standby
            - "GroupTerminatingInstances"  # Number of instances terminating
            - "GroupTotalInstances"  # Total number of instances
      Tags:
        - Key: Name
          Value: WebTierAutoScalingGroup
          PropagateAtLaunch: true
    DependsOn: WebTierLoadBalancer # Wait for the load balancer to be created

  WebTierLaunchConfiguration:
    Type: AWS::AutoScaling::LaunchConfiguration
    Properties:
      ImageId: ami-0aa7d40eeae50c9a9  # Amazon Linux 2 AMI
      InstanceType: t2.micro  # Free tier instance type
      KeyName: !Ref KeyName
      SecurityGroups:
        - !GetAtt WebTierSecurityGroupLoadBalancer.GroupId
      UserData:
        Fn::Base64: !Sub |
          #!/bin/bash
          # Install the necessary packages and start the web server
          yum update -y
          yum install htop -y
          amazon-linux-extras install epel -y
          yum install stress -y
          # stress --cpu 8 --timeout 800 &
          # killall stress
          yum install git -y
          yum install -y httpd
          systemctl start httpd
          systemctl enable httpd
          # Clone the sample app and move its files to the web server root
          cd /var/www/html/
          git clone "https://github.com/SimonJan2/Simon-Portfolio-Website"
          mv -f ./Simon-Portfolio-Website/* .
          rm -rf Simon-Portfolio-Website

#------------------------- Web Tier Scaling Policies -------------------------#
  WebTierScaleOutPolicy:
    Type: AWS::AutoScaling::ScalingPolicy # Create a scaling policy
    Properties: 
      AdjustmentType: ChangeInCapacity # Increase or decrease number of instances
      AutoScalingGroupName: !Ref WebTierAutoScalingGroup # Name of the ASG
      Cooldown: 300 # Adjust based on your scaling needs
      ScalingAdjustment: 2 # Increase by 2 instances

  WebTierScaleInPolicy:
    Type: AWS::AutoScaling::ScalingPolicy
    Properties:
      AdjustmentType: ChangeInCapacity # Decrease by 2 instances
      AutoScalingGroupName: !Ref WebTierAutoScalingGroup # Name of the ASG
      Cooldown: 300 # Adjust based on your scaling needs
      ScalingAdjustment: -2 # Decrease by 2 instances

  WebTierScaleOutAlarm:
    Type: AWS::CloudWatch::Alarm
    Properties:
      AlarmDescription: "Scale up if CPU utilization is greater than 40% for 1 minutes"
      Namespace: AWS/EC2 # Use the EC2 namespace
      MetricName: CPUUtilization # CPU utilization
      Dimensions:
        - Name: AutoScalingGroupName # Name of the ASG
          Value: !Ref WebTierAutoScalingGroup # Name of the ASG
      Statistic: Average # Use the average statistic
      Period: 300 # set to 5 minutes (Free tier)
      EvaluationPeriods: 1 # 1 minute
      Threshold: 40 # 40%
      ComparisonOperator: GreaterThanThreshold # Scale up if CPU utilization is greater than 40%
      AlarmActions: [!Ref WebTierScaleOutPolicy] # Add the scaling policy
  
  WebTierScaleInAlarm:
    Type: AWS::CloudWatch::Alarm
    Properties:
      AlarmDescription: "Scale down if CPU utilization is less than 20% for 1 minutes"
      Namespace: AWS/EC2 # Use the EC2 namespace
      MetricName: CPUUtilization # CPU utilization
      Dimensions:
        - Name: AutoScalingGroupName # Name of the ASG
          Value: !Ref WebTierAutoScalingGroup # Name of the ASG
      Statistic: Average # Use the average statistic
      Period: 300 # set to 5 minutes (Free tier)
      EvaluationPeriods: 1 # 1 minute
      Threshold: 20 # 20%
      ComparisonOperator: LessThanThreshold # Scale down if CPU utilization is less than 20%
      AlarmActions: [!Ref WebTierScaleInPolicy] # Add the scaling policy

#------------------------- Application Tier Auto Scaling Group -------------------------#
  AppTierAutoScalingGroup:
    Type: AWS::AutoScaling::AutoScalingGroup
    Properties:
      AutoScalingGroupName: AppTierAutoScalingGroup # Name of the ASG
      LaunchConfigurationName: !Ref AppTierLaunchConfiguration  # Use the launch configuration created above
      MaxSize: 4 # Max number of instances in the ASG
      DesiredCapacity: 2 # Desired number of instances
      MinSize: 2 # Min number of instances in the ASG
      TargetGroupARNs:
        - !Ref ApplicationTierTargetGroup # Associate the target group with the ASG
      VPCZoneIdentifier:
        - !ImportValue ApplicationTierPrivateSubnet1 # Launch instances in these subnets
        - !ImportValue ApplicationTierPrivateSubnet2 # Launch instances in these subnets
      HealthCheckType: EC2 # Use EC2 health checks
      HealthCheckGracePeriod: 300 # Wait 300 seconds before checking health
      MetricsCollection:
        - Granularity: "1Minute"  # Metrics granularity: 1 minute
          Metrics:
            - "GroupMinSize"  # Minimum size of the Auto Scaling Group
            - "GroupMaxSize"  # Maximum size of the Auto Scaling Group
            - "GroupDesiredCapacity"  # Desired capacity of the Auto Scaling Group
            - "GroupInServiceInstances"  # Number of instances in service
            - "GroupPendingInstances"  # Number of instances pending
            - "GroupStandbyInstances"  # Number of instances in standby
            - "GroupTerminatingInstances"  # Number of instances terminating
            - "GroupTotalInstances"  # Total number of instances
      Tags:
        - Key: Name
          Value: "ApplicationTier-Server"
          PropagateAtLaunch: true
    DependsOn: ApplicationTierLoadBalancer # Wait for the load balancer to be created

  AppTierLaunchConfiguration:
    Type: AWS::AutoScaling::LaunchConfiguration
    Properties:
      ImageId: ami-0aa7d40eeae50c9a9  # Amazon Linux 2 AMI
      InstanceType: t2.micro  # Free tier instance type
      IamInstanceProfile: !ImportValue S3FullAccessInstanceProfile # Use the created instance profile
      KeyName: !Ref KeyName
      SecurityGroups:
        - !ImportValue ApplicationTierSecurityGroup # Attach to this security group
      UserData:
        Fn::Base64: !Sub |
          #!/bin/bash
          # Create a new S3 bucket
          # The bucket name is "rashbag-ec2-private-1"
          BUCKET_NAME="rashbag-ec2-private-1"

          # Documentation: https://docs.aws.amazon.com/cli/latest/reference/s3/mb.html
          aws s3 mb s3://$BUCKET_NAME

          # Create a file with the content "hello world"
          echo "hello world" > rashbag.txt

          # Upload the file to the new bucket
          # The object key is "rashbag.txt"
          aws s3 cp rashbag.txt s3://$BUCKET_NAME/


