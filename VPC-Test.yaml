# Creation of VPC with Subnets, IGW, Route Table Associations for CloudFormation

AWSTemplateFormatVersion: '2010-09-09'
Description: VPC with Subnets, IGW, Route Table Associations

#← ←←←←←←←←←←←←← Parameters →→→→→→→→→→→→→→#
Parameters:  

  KeyName:
    Type: AWS::EC2::KeyPair::KeyName
    Description: Name of an existing EC2 KeyPair to enable SSH access to the instances
    Default: MyKeyPair
    
  VPCCidrBlock:
    Type: String
    Description: CIDR block (IPv4) for the VPC (x.x.x.x/y)
    AllowedPattern: '(\d{1,3})\.(\d{1,3})\.(\d{1,3})\.(\d{1,3})/(\d{1,2})' # This parameter allows only CIDR block in the form of x.x.x.x/y
    ConstraintDescription: must be a valid IPv4 CIDR range
    Default: 10.0.0.0/16
  
  WebTierPublicSubnet1CidrBlock:
    Type: String
    Description: CIDR block (IPv4) for the Web Tier Public Subnet 1 (x.x.x.x/y)
    AllowedPattern: '(\d{1,3})\.(\d{1,3})\.(\d{1,3})\.(\d{1,3})/(\d{1,2})' # This parameter allows only CIDR block in the form of x.x.x.x/y
    ConstraintDescription: must be a valid IPv4 CIDR range
    Default: 10.0.1.0/24

  WebTierPublicSubnet2CidrBlock:
    Type: String
    Description: CIDR block (IPv4) for the Web Tier Public Subnet 2 (x.x.x.x/y)
    AllowedPattern: '(\d{1,3})\.(\d{1,3})\.(\d{1,3})\.(\d{1,3})/(\d{1,2})' # This parameter allows only CIDR block in the form of x.x.x.x/y
    ConstraintDescription: must be a valid IPv4 CIDR range
    Default: 10.0.2.0/24
  
  ApplicationTierPrivateSubnet1CidrBlock:
    Type: String
    Description: CIDR block (IPv4) for the Application Tier Private Subnet 1 (x.x.x.x/y)
    AllowedPattern: '(\d{1,3})\.(\d{1,3})\.(\d{1,3})\.(\d{1,3})/(\d{1,2})' # This parameter allows only CIDR block in the form of x.x.x.x/y
    ConstraintDescription: must be a valid IPv4 CIDR range
    Default: 10.0.3.0/24

  ApplicationTierPrivateSubnet2CidrBlock:
    Type: String
    Description: CIDR block (IPv4) for the Application Tier Private Subnet 2 (x.x.x.x/y)
    AllowedPattern: '(\d{1,3})\.(\d{1,3})\.(\d{1,3})\.(\d{1,3})/(\d{1,2})' # This parameter allows only CIDR block in the form of x.x.x.x/y
    ConstraintDescription: must be a valid IPv4 CIDR range
    Default: 10.0.4.0/24

  DatabaseTierPrivateSubnet1CidrBlock:
    Type: String
    Description: CIDR block (IPv4) for the Database Tier Private Subnet 1 (x.x.x.x/y)
    AllowedPattern: '(\d{1,3})\.(\d{1,3})\.(\d{1,3})\.(\d{1,3})/(\d{1,2})' # This parameter allows only CIDR block in the form of x.x.x.x/y
    ConstraintDescription: must be a valid IPv4 CIDR range
    Default: 10.0.5.0/24

  DatabaseTierPrivateSubnet2CidrBlock:
    Type: String
    Description: CIDR block (IPv4) for the Database Tier Private Subnet 2 (x.x.x.x/y)
    AllowedPattern: '(\d{1,3})\.(\d{1,3})\.(\d{1,3})\.(\d{1,3})/(\d{1,2})' # This parameter allows only CIDR block in the form of x.x.x.x/y
    ConstraintDescription: must be a valid IPv4 CIDR range
    Default: 10.0.6.0/24

#←←←←←←←←←←←←←← Resources →→→→→→→→→→→→→→#
Resources:

#============================== S3 Full Access Role ==============================#
  S3FullAccessRoleForEC2:
    Type: 'AWS::IAM::Role'
    Properties:
      RoleName: S3FullAccessRoleForEC2  # Name of the role
      # This is the role's trust policy statement that defines
      # which services are allowed to assume this role.
      AssumeRolePolicyDocument:
        Version: '2012-10-17'  # Policy format version
        Statement:
          - Effect: Allow  # Allow the defined services to assume this role
            Principal:
              Service:  # The services that can assume this role
                - ec2.amazonaws.com
            Action:
              - 'sts:AssumeRole'  # The action that allows the service to assume the role
      Policies:
        - PolicyName: S3FullAccessPolicy  # Name of the inline policy in the role
          PolicyDocument:
            Version: '2012-10-17'  # Policy format version
            Statement:
              - Effect: Allow  # Allow the defined actions on the defined resources
                Action:
                  - 's3:*'  # The actions to be allowed
                Resource:
                  - '*'  # The resources to which the actions apply
            #↓↓↓↓ Instance Profile ↓↓↓↓#
  S3FullAccessInstanceProfile:  # New resource for instance profile
    Type: AWS::IAM::InstanceProfile
    Properties:
      # The role(s) that should be applied to EC2 instances that use
      # this profile.
      Roles:
        - !Ref S3FullAccessRoleForEC2  # Reference the created IAM role
    DependsOn: S3FullAccessRoleForEC2  # This ensures role is created first


#------------------------- VPC creation -------------------------#
  MyVPC:
    Type: AWS::EC2::VPC  # This is an AWS resource type for a Virtual Private Cloud
    Properties:
      CidrBlock: !Ref VPCCidrBlock
      # This property enables DNS resolution within the VPC
      EnableDnsSupport: 'true'
      # This property enables DNS hostnames within the VPC
      EnableDnsHostnames: 'true'
      # The default tenancy option is 'default'
      InstanceTenancy: default
      # This sets a tag with a key of 'Name' and the value of 'Rashbag-VPC'
      Tags:
      - Key: Name
        Value: Rashbag-VPC

#------------------------- Subnets creation -------------------------#
  # This is the WebTierPublicSubnet1 10.0.1.0/24
  WebTierPublicSubnet1:
    Type: AWS::EC2::Subnet # This is an AWS resource type for a Subnet
    Properties:
      CidrBlock: !Ref WebTierPublicSubnet1CidrBlock  # This is the IP address range for the Subnet
      VpcId: !Ref MyVPC  # This links the Subnet to the VPC
      MapPublicIpOnLaunch: true # This enables auto-assignment of IPv4 addresses
      AvailabilityZone: us-east-1a # This is the Availability Zone
      Tags: # This sets a tag with a key of 'Name' and the value of 'WebTierPublicSubnet1 - us-east-1a - 10.0.1.0/24'
      - Key: Name
        Value: !Join [ " - ", ["WebTierPublicSubnet1", "us-east-1a", !Ref WebTierPublicSubnet1CidrBlock] ] # This is the name of the subnet

  # This is the WebTierPublicSubnet2 10.0.2.0/24
  WebTierPublicSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      CidrBlock: !Ref WebTierPublicSubnet2CidrBlock
      VpcId: !Ref MyVPC
      MapPublicIpOnLaunch: true
      AvailabilityZone: us-east-1b
      Tags:
      - Key: Name
        Value: !Join [ " - ", ["WebTierPublicSubnet2", "us-east-1b", !Ref WebTierPublicSubnet2CidrBlock] ]

  # This is the ApplicationTierPrivateSubnet1 10.0.3.0/24
  ApplicationTierPrivateSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      CidrBlock: !Ref ApplicationTierPrivateSubnet1CidrBlock
      VpcId: !Ref MyVPC
      AvailabilityZone: us-east-1a
      Tags:
      - Key: Name
        Value: !Join [ " - ", ["ApplicationTierPrivateSubnet1", "us-east-1a", !Ref ApplicationTierPrivateSubnet1CidrBlock] ]

  # This is the ApplicationTierPrivateSubnet2 10.0.4.0/24
  ApplicationTierPrivateSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      CidrBlock: !Ref ApplicationTierPrivateSubnet2CidrBlock
      VpcId: !Ref MyVPC
      AvailabilityZone: us-east-1b
      Tags:
      - Key: Name
        Value: !Join [ " - ", ["ApplicationTierPrivateSubnet2", "us-east-1b", !Ref ApplicationTierPrivateSubnet2CidrBlock] ]

  # This is the DatabaseTierPrivateSubnet1 10.0.5.0/24
  DatabaseTierPrivateSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      CidrBlock: !Ref DatabaseTierPrivateSubnet1CidrBlock
      VpcId: !Ref MyVPC
      AvailabilityZone: us-east-1a
      Tags:
      - Key: Name
        Value: !Join [ " - ", ["DatabaseTierPrivateSubnet1", "us-east-1a", !Ref DatabaseTierPrivateSubnet1CidrBlock] ]

  # This is the DatabaseTierPrivateSubnet2 10.0.6.0/24
  DatabaseTierPrivateSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      CidrBlock: !Ref DatabaseTierPrivateSubnet2CidrBlock
      VpcId: !Ref MyVPC
      AvailabilityZone: us-east-1b
      Tags:
      - Key: Name
        Value: !Join [ " - ", ["DatabaseTierPrivateSubnet2", "us-east-1b", !Ref DatabaseTierPrivateSubnet2CidrBlock] ]

#------------------------- Internet Gateway -------------------------#
  InternetGateway:
    Type: AWS::EC2::InternetGateway # This is an AWS resource type for an Internet Gateway
    Properties:
      Tags:
        - Key: Name
          Value: InternetGateway # This sets a tag with a key of 'Name' and the value of 'InternetGateway'
#------------------------- Attach Internet Gateway to VPC -------------------------#
  AttachGateway:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      VpcId: !Ref MyVPC
      InternetGatewayId: !Ref InternetGateway
    DependsOn: InternetGateway

#------------------------- Public Route Tables -------------------------#
  # This is the WebTierPublicRouteTable
  WebTierPublicRouteTable:
    Type: AWS::EC2::RouteTable # This is an AWS resource type for a Route Table
    Properties:
      VpcId: !Ref MyVPC # This links the Route Table to the VPC
      Tags:
        - Key: Name
          Value: WebTierPublicRouteTable # This sets a tag with a key of 'Name' and the value of 'Rashbag-VPC'

 # WebRouteTableAssociation
  WebTierPublicSubnet1RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref WebTierPublicSubnet1
      RouteTableId: !Ref WebTierPublicRouteTable
    DependsOn: AttachGateway

  WebTierPublicSubnet2RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref WebTierPublicSubnet2
      RouteTableId: !Ref WebTierPublicRouteTable
    DependsOn: AttachGateway
  
  #------------------------- Private Route Tables -------------------------#
  # This is the ApplicationTierPrivateRouteTable
  ApplicationTierPrivateRouteTable:
    Type: AWS::EC2::RouteTable # This is an AWS resource type for a Route Table
    Properties:
      VpcId: !Ref MyVPC # This links the Route Table to the VPC
      Tags:
        - Key: Name
          Value: ApplicationTierPrivateRouteTable # This sets a tag with a key of 'Name' and the value of 'Rashbag-VPC'

  ApplicationTierPrivateSubnet1RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref ApplicationTierPrivateSubnet1
      RouteTableId: !Ref ApplicationTierPrivateRouteTable
    DependsOn: AttachGateway

  ApplicationTierPrivateSubnet2RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref ApplicationTierPrivateSubnet2
      RouteTableId: !Ref ApplicationTierPrivateRouteTable
    DependsOn: AttachGateway

#------------------------- Database Route Tables -------------------------#
  # This is the DatabaseTierPrivateRouteTable
  DatabaseTierPrivateRouteTable:
    Type: AWS::EC2::RouteTable # This is an AWS resource type for a Route Table
    Properties:
      VpcId: !Ref MyVPC # This links the Route Table to the VPC
      Tags:
        - Key: Name
          Value: DatabaseTierPrivateRouteTable # This sets a tag with a key of 'Name' and the value of 'Rashbag-VPC'
  
  DatabaseTierPrivateSubnet1RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref DatabaseTierPrivateSubnet1
      RouteTableId: !Ref DatabaseTierPrivateRouteTable
    DependsOn: AttachGateway

  DatabaseTierPrivateSubnet2RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref DatabaseTierPrivateSubnet2
      RouteTableId: !Ref DatabaseTierPrivateRouteTable
    DependsOn: AttachGateway

#------------------------- Route to IGW from Web Tier Public Subnets -------------------------#
  WebTierPublicRoute:
    Type: AWS::EC2::Route
    # DependsOn: WebTierPublicSubnet1
    Properties:
      RouteTableId: !Ref WebTierPublicRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref InternetGateway

#------------------------- Route to IGW from Application Tier Private Subnets -------------------------#
  ApplicationTierPrivateRoute:
    Type: AWS::EC2::Route
    # DependsOn: ApplicationTierPrivateSubnet1
    Properties:
      RouteTableId: !Ref ApplicationTierPrivateRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref InternetGateway

#------------------------- Route to IGW from Database Tier Private Subnets -------------------------#
  DatabaseTierPrivateRoute:
    Type: AWS::EC2::Route
    # DependsOn: DatabaseTierPrivateSubnet1
    Properties:
      RouteTableId: !Ref DatabaseTierPrivateRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref InternetGateway

#------------------------- Security Groups -------------------------#
  WebTierSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupName: WebTierSecurityGroup
      GroupDescription: WebTierSecurityGroup
      VpcId: !Ref MyVPC
      Tags:
        - Key: Name
          Value: WebTierSecurityGroup
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 22
          ToPort: 22
          CidrIp: 0.0.0.0/0
        - IpProtocol: icmp
          FromPort: -1
          ToPort: -1
          CidrIp: 0.0.0.0/0

  ApplicationTierSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupName: ApplicationTierSecurityGroup
      GroupDescription: ApplicationTierSecurityGroup
      VpcId: !Ref MyVPC
      Tags:
        - Key: Name
          Value: ApplicationTierSecurityGroup
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 22
          ToPort: 22
          CidrIp: 0.0.0.0/0
        - IpProtocol: icmp
          FromPort: -1
          ToPort: -1
          CidrIp: 0.0.0.0/0
  
  DatabaseTierSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupName: DatabaseTierSecurityGroup
      GroupDescription: DatabaseTierSecurityGroup
      VpcId: !Ref MyVPC
      Tags:
        - Key: Name
          Value: DatabaseTierSecurityGroup
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 3306
          ToPort: 3306
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 22
          ToPort: 22
          CidrIp: 0.0.0.0/0
        - IpProtocol: icmp
          FromPort: -1
          ToPort: -1
          CidrIp: 0.0.0.0/0

#------------------------- Web Tier Load Balancer -------------------------#
  WebTierSecurityGroupLoadBalancer:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Security group for the web tier load balancer
      VpcId: !Ref MyVPC
      GroupName: WebTierSecurityGroupLoadBalancer
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0
      Tags:
        - Key: Name
          Value: WebTierSecurityGroupLoadBalancer
  
  WebTierLoadBalancer:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      Name: WebTierLoadBalancer
      Scheme: internet-facing
      Subnets:
        - !Ref WebTierPublicSubnet1
        - !Ref WebTierPublicSubnet2
      SecurityGroups:
        - !GetAtt WebTierSecurityGroupLoadBalancer.GroupId
      LoadBalancerAttributes:
        - Key: idle_timeout.timeout_seconds
          Value: '60'
    DependsOn: WebTierSecurityGroupLoadBalancer

  WebTierLoadBalancerListener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      DefaultActions:
        - Type: Forward
          TargetGroupArn: !Ref WebTierTargetGroup
      LoadBalancerArn: !Ref WebTierLoadBalancer
      Port: 80
      Protocol: HTTP
    
  WebTierTargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      Name: WebTierTargetGroup
      Protocol: HTTP
      TargetType: instance  # Targets are EC2 instances
      VpcId: !Ref MyVPC # Target Group is in the same VPC as the load balancer
      HealthCheckPath: /  # Use the root URL for health checks      
      Port: 80  # Target Group will forward traffic to port 80 of its targets
      HealthCheckProtocol: HTTP 
      HealthCheckIntervalSeconds: 30 
      HealthCheckTimeoutSeconds: 5  
      HealthyThresholdCount: 2  
      UnhealthyThresholdCount: 2  

#------------------------- Application Tier Load Balancer -------------------------#
  ApplicationTierSecurityGroupLoadBalancer:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Security group for the application tier load balancer
      VpcId: !Ref MyVPC
      GroupName: ApplicationTierSecurityGroupLoadBalancer
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0
      Tags:
        - Key: Name
          Value: ApplicationTierSecurityGroupLoadBalancer
  
  ApplicationTierLoadBalancer:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      Name: ApplicationTierLoadBalancer
      Scheme: internal
      Subnets: 
        - !Ref ApplicationTierPrivateSubnet1
        - !Ref ApplicationTierPrivateSubnet2
      SecurityGroups:
        - !GetAtt ApplicationTierSecurityGroupLoadBalancer.GroupId
      LoadBalancerAttributes:
        - Key: idle_timeout.timeout_seconds
          Value: '60'
    DependsOn: ApplicationTierSecurityGroupLoadBalancer

  ApplicationTierLoadBalancerListener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      DefaultActions:
        - Type: Forward
          TargetGroupArn: !Ref ApplicationTierTargetGroup
      LoadBalancerArn: !Ref ApplicationTierLoadBalancer
      Port: 80
      Protocol: HTTP
    
  ApplicationTierTargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      Name: ApplicationTierTargetGroup
      Protocol: HTTP
      TargetType: instance  # Targets are EC2 instances
      VpcId: !Ref MyVPC # Target Group is in the same VPC as the load balancer
      HealthCheckPath: /  # Use the root URL for health checks
      Port: 80  # Target Group will forward traffic to port 80 of its targets
      HealthCheckProtocol: HTTP 
      HealthCheckIntervalSeconds: 30 
      HealthCheckTimeoutSeconds: 5  
      HealthyThresholdCount: 2  
      UnhealthyThresholdCount: 2

#----------------------------- Web Tier Auto Scaling Group -----------------------------#
  WebTierAutoScalingGroup:
    Type: AWS::AutoScaling::AutoScalingGroup
    Properties:
      AutoScalingGroupName: WebTierAutoScalingGroup # Name of the ASG
      LaunchConfigurationName: WebTierLaunchConfig # Use the launch configuration created above
      MaxSize: 4 # Max number of instances in the ASG
      DesiredCapacity: 2 # Desired number of instances
      MinSize: 2 # Min number of instances in the ASG
      TargetGroupARNs:
        - !GetAtt WebTierTargetGroup.Arn # Associate the target group with the ASG
      VPCZoneIdentifier:
        - !Ref WebTierPublicSubnet1 # Launch instances in these subnets
        - !Ref WebTierPublicSubnet2 # Launch instances in these subnets
      HealthCheckType: EC2 # Use EC2 health checks
      HealthCheckGracePeriod: 300 # Wait 300 seconds before checking health
      MetricsCollection:
        - Granularity: "1Minute"  # Metrics granularity: 1 minute
          Metrics:
            - "GroupMinSize"  # Minimum size of the Auto Scaling Group
            - "GroupMaxSize"  # Maximum size of the Auto Scaling Group
            - "GroupDesiredCapacity"  # Desired capacity of the Auto Scaling Group
            - "GroupInServiceInstances"  # Number of instances in service
            - "GroupPendingInstances"  # Number of instances pending
            - "GroupStandbyInstances"  # Number of instances in standby
            - "GroupTerminatingInstances"  # Number of instances terminating
            - "GroupTotalInstances"  # Total number of instances
      Tags:
        - Key: Name
          Value: WebTierAutoScalingGroup
          PropagateAtLaunch: true
    DependsOn: WebTierLoadBalancer # Wait for the load balancer to be created

  WebTierLaunchConfiguration:
    Type: AWS::AutoScaling::LaunchConfiguration
    Properties:
      ImageId: ami-0aa7d40eeae50c9a9  # Amazon Linux 2 AMI
      InstanceType: t2.micro  # Free tier instance type
      KeyName: !Ref KeyName
      SecurityGroups:
        - !GetAtt WebTierSecurityGroupLoadBalancer.GroupId
      UserData:
        Fn::Base64: !Sub |
          #!/bin/bash
          # Install the necessary packages and start the web server
          yum update -y
          yum install htop -y
          amazon-linux-extras install epel -y
          yum install stress -y
          # stress --cpu 8 --timeout 800 &
          # killall stress
          yum install git -y
          yum install -y httpd
          systemctl start httpd
          systemctl enable httpd
          # Clone the sample app and move its files to the web server root
          cd /var/www/html/
          git clone "https://github.com/SimonJan2/Simon-Portfolio-Website"
          mv -f ./Simon-Portfolio-Website/* .
          rm -rf Simon-Portfolio-Website

#------------------------- Web Tier Scaling Policies -------------------------#
  WebTierScaleOutPolicy:
    Type: AWS::AutoScaling::ScalingPolicy # Create a scaling policy
    Properties: 
      AdjustmentType: ChangeInCapacity # Increase or decrease number of instances
      AutoScalingGroupName: !Ref WebTierAutoScalingGroup # Name of the ASG
      Cooldown: 300 # Adjust based on your scaling needs
      ScalingAdjustment: 2 # Increase by 2 instances

  WebTierScaleInPolicy:
    Type: AWS::AutoScaling::ScalingPolicy
    Properties:
      AdjustmentType: ChangeInCapacity # Decrease by 2 instances
      AutoScalingGroupName: !Ref WebTierAutoScalingGroup # Name of the ASG
      Cooldown: 300 # Adjust based on your scaling needs
      ScalingAdjustment: -2 # Decrease by 2 instances

  WebTierScaleOutAlarm:
    Type: AWS::CloudWatch::Alarm
    Properties:
      AlarmDescription: "Scale up if CPU utilization is greater than 40% for 1 minutes"
      Namespace: AWS/EC2 # Use the EC2 namespace
      MetricName: CPUUtilization # CPU utilization
      Dimensions:
        - Name: AutoScalingGroupName # Name of the ASG
          Value: !Ref WebTierAutoScalingGroup # Name of the ASG
      Statistic: Average # Use the average statistic
      Period: 300 # set to 5 minutes (Free tier)
      EvaluationPeriods: 1 # 1 minute
      Threshold: 40 # 40%
      ComparisonOperator: GreaterThanThreshold # Scale up if CPU utilization is greater than 40%
      AlarmActions: [!Ref WebTierScaleOutPolicy] # Add the scaling policy
  
  WebTierScaleInAlarm:
    Type: AWS::CloudWatch::Alarm
    Properties:
      AlarmDescription: "Scale down if CPU utilization is less than 20% for 1 minutes"
      Namespace: AWS/EC2 # Use the EC2 namespace
      MetricName: CPUUtilization # CPU utilization
      Dimensions:
        - Name: AutoScalingGroupName # Name of the ASG
          Value: !Ref WebTierAutoScalingGroup # Name of the ASG
      Statistic: Average # Use the average statistic
      Period: 300 # set to 5 minutes (Free tier)
      EvaluationPeriods: 1 # 1 minute
      Threshold: 20 # 20%
      ComparisonOperator: LessThanThreshold # Scale down if CPU utilization is less than 20%
      AlarmActions: [!Ref WebTierScaleInPolicy] # Add the scaling policy

#------------------------- Application Tier Auto Scaling Group -------------------------#
  AppTierAutoScalingGroup:
    Type: AWS::AutoScaling::AutoScalingGroup
    Properties:
      AutoScalingGroupName: AppTierAutoScalingGroup # Name of the ASG
      LaunchConfigurationName: AppTierLaunchConfig  # Use the launch configuration created above
      MaxSize: 4 # Max number of instances in the ASG
      DesiredCapacity: 2 # Desired number of instances
      MinSize: 2 # Min number of instances in the ASG
      TargetGroupARNs:
        - !GetAtt ApplicationTierTargetGroup.Arn # Associate the target group with the ASG
      VPCZoneIdentifier:
        - !Ref ApplicationTierPrivateSubnet1 # Launch instances in these subnets
        - !Ref ApplicationTierPrivateSubnet2 # Launch instances in these subnets
      HealthCheckType: EC2 # Use EC2 health checks
      HealthCheckGracePeriod: 300 # Wait 300 seconds before checking health
      MetricsCollection:
        - Granularity: "1Minute"  # Metrics granularity: 1 minute
          Metrics:
            - "GroupMinSize"  # Minimum size of the Auto Scaling Group
            - "GroupMaxSize"  # Maximum size of the Auto Scaling Group
            - "GroupDesiredCapacity"  # Desired capacity of the Auto Scaling Group
            - "GroupInServiceInstances"  # Number of instances in service
            - "GroupPendingInstances"  # Number of instances pending
            - "GroupStandbyInstances"  # Number of instances in standby
            - "GroupTerminatingInstances"  # Number of instances terminating
            - "GroupTotalInstances"  # Total number of instances
      Tags:
        - Key: Name
          Value: "ApplicationTier-Server"
          PropagateAtLaunch: true
    DependsOn: ApplicationTierLoadBalancer # Wait for the load balancer to be created

  AppTierLaunchConfiguration:
    Type: AWS::AutoScaling::LaunchConfiguration
    Properties:
      ImageId: ami-0aa7d40eeae50c9a9  # Amazon Linux 2 AMI
      InstanceType: t2.micro  # Free tier instance type
      IamInstanceProfile: !Ref S3FullAccessInstanceProfile # Use the created instance profile
      KeyName: !Ref KeyName
      SecurityGroups:
        - !GetAtt ApplicationTierSecurityGroup.GroupId # Attach to this security group
      UserData:
        Fn::Base64: !Sub |
          #!/bin/bash
          # Create a new S3 bucket
          # The bucket name is "rashbag-ec2-private-1"
          BUCKET_NAME="rashbag-ec2-private-1"

          # Documentation: https://docs.aws.amazon.com/cli/latest/reference/s3/mb.html
          aws s3 mb s3://$BUCKET_NAME

          # Create a file with the content "hello world"
          echo "hello world" > rashbag.txt

          # Upload the file to the new bucket
          # The object key is "rashbag.txt"
          aws s3 cp rashbag.txt s3://$BUCKET_NAME/

# #------------------------- Database Tier RDS Instance -------------------------#
#   RDSDBInstance:
#     Type: AWS::RDS::DBInstance
#     Properties:
#       DBName: mydatabase
#       AllocatedStorage: 20
#       DBInstanceClass: db.t2.micro
#       Engine: MySQL
#       EngineVersion: '8.0'
#       MasterUsername: admin
#       MasterUserPassword: Aa12345678
#       MultiAZ: true # Enable Multi-AZ
#       DBSubnetGroupName: !Ref RDSSubnetGroup
#       VPCSecurityGroups: !GetAtt DatabaseTierSecurityGroup.GroupId
  
#   RDSSubnetGroup:
#     Type: AWS::RDS::DBSubnetGroup
#     Properties:
#       DBSubnetGroupDescription: Subnet group for RDS
#       DBSubnetGroupName: !Ref DatabaseTierSecurityGroup
#       SubnetIds:
#         - !Ref DatabaseTierPrivateSubnet1
#         - !Ref DatabaseTierPrivateSubnet2

# #------------------------- Endpoints -------------------------#
# # Endpoint for accessing Amazon S3 with a Name tag
#   S3GatewayEndpoint:
#     Type: AWS::EC2::VPCEndpoint
#     Properties:
#       VpcEndpointType: Gateway
#       VpcId: !Ref MyVPC
#       ServiceName: !Sub 'com.amazonaws.${AWS::Region}.s3'
#       PolicyDocument:
#         Version: "2008-10-17"
#         Statement:
#           - Effect: Allow
#             Principal: "*"
#             Action: "*"
#             Resource: "*"
#       RouteTableIds:
#         - !Ref ApplicationTierPrivateRouteTable

#   # AplicationInstanceConnectEndpoint:
#   #   Type: AWS::EC2::InstanceConnectEndpoint
#   #   Properties:
#   #     PreserveClientIp: false  # Set to true to preserve the client's IP address when establishing an instance connection
#   #     SecurityGroupIds: 
#   #       - !GetAtt ApplicationTierSecurityGroup.GroupId # Replace with your security group ID(s)
#   #     SubnetId: !Ref ApplicationTierPrivateSubnet1  # Only one subnet ID is allowed per instance connect endpoint
#   #     Tags: 
#   #       - Key: Name
#   #         Value: ApplicationTierInstanceConnectEndpoint

#   # DatabaseInstanceConnectEndpoint:
#   #   Type: AWS::EC2::InstanceConnectEndpoint
#   #   Properties:
#   #     PreserveClientIp: false  # Set to true to preserve the client's IP address when establishing an instance connection
#   #     SecurityGroupIds: 
#   #       - !GetAtt DatabaseTierSecurityGroup.Arn # Replace with your security group ID(s)
#   #     SubnetId: !Ref DatabaseTierPrivateSubnet1  # Only one subnet ID is allowed per instance connect endpoint
#   #     Tags: 
#   #       - Key: Name
#   #         Value: DatabaseTierInstanceConnectEndpoint